/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg304application;
import pkg304application.database.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author jko
 */
public class ProfileForm extends javax.swing.JFrame {
    
    public Boolean editing = false;
    Statement stmt = null;
    ResultSet rs = null;
    public static int searchUserID;
    String queryString;
    Statement stmt2;  
    
    /**
     * Creates new form ProfileForm
     */
    public ProfileForm() {
        try {
            DatabaseConnection dbc = new DatabaseConnection();
            dbc.init();
            stmt = dbc.getMyConnection().createStatement();
            stmt2 = dbc.getMyConnection().createStatement();
            initComponents();
            showProfileInfo();
            showFriendList();
            showGameList();
            showGroupList();
            showReviewList();
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextField = new javax.swing.JTextArea();
        logoutButton = new javax.swing.JButton();
        ProfileName = new javax.swing.JLabel();
        Friends = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        friendList = new javax.swing.JList<>();
        Tabs = new javax.swing.JTabbedPane();
        gamesTab = new javax.swing.JScrollPane();
        gameList = new javax.swing.JList<>();
        groupsTab = new javax.swing.JScrollPane();
        groupList = new javax.swing.JList<>();
        reviewsTab = new javax.swing.JScrollPane();
        reviewList = new javax.swing.JList<>();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        deleteFriend = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        usersRadioButton = new javax.swing.JRadioButton();
        groupRadioButton = new javax.swing.JRadioButton();
        gameRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        createGroupButton = new javax.swing.JButton();
        backgroundImg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(860, 740));
        setSize(new java.awt.Dimension(860, 740));
        getContentPane().setLayout(null);

        editButton.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        editButton.setForeground(new java.awt.Color(255, 255, 255));
        editButton.setText("Edit");
        editButton.setAutoscrolls(true);
        editButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        getContentPane().add(editButton);
        editButton.setBounds(500, 400, 100, 30);

        descriptionTextField.setColumns(20);
        descriptionTextField.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        descriptionTextField.setRows(5);
        jScrollPane1.setViewportView(descriptionTextField);
        descriptionTextField.setEditable(false);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 190, 550, 200);

        logoutButton.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        logoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/staticImg/logoutIcon.png"))); // NOI18N
        logoutButton.setBorder(null);
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });
        getContentPane().add(logoutButton);
        logoutButton.setBounds(760, 40, 60, 50);

        ProfileName.setFont(new java.awt.Font("Univers LT 45 Light", 1, 24)); // NOI18N
        ProfileName.setText("Profile Name");
        getContentPane().add(ProfileName);
        ProfileName.setBounds(620, 50, 137, 30);

        Friends.setFont(new java.awt.Font("Univers LT 45 Light", 1, 24)); // NOI18N
        Friends.setText("Friends:");
        getContentPane().add(Friends);
        Friends.setBounds(690, 150, 84, 30);

        friendList.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        friendList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        friendList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(friendList);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(690, 190, 120, 200);

        Tabs.setFont(new java.awt.Font("Univers LT 45 Light", 1, 12)); // NOI18N

        gameList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gameList.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        gameList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        gameList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gameListMouseClicked(evt);
            }
        });
        gamesTab.setViewportView(gameList);

        Tabs.addTab("Games", gamesTab);

        groupList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        groupList.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        groupList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        groupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupListMouseClicked(evt);
            }
        });
        groupsTab.setViewportView(groupList);

        Tabs.addTab("Groups", groupsTab);

        reviewList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        reviewList.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        reviewList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        reviewList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reviewListMouseClicked(evt);
            }
        });
        reviewsTab.setViewportView(reviewList);

        Tabs.addTab("Reviews", reviewsTab);

        getContentPane().add(Tabs);
        Tabs.setBounds(40, 460, 570, 210);

        searchField.setFont(new java.awt.Font("PT Serif Caption", 0, 14)); // NOI18N
        searchField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        getContentPane().add(searchField);
        searchField.setBounds(50, 40, 400, 50);

        searchButton.setFont(new java.awt.Font("PT Serif Caption", 0, 14)); // NOI18N
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/staticImg/searchIcon.png"))); // NOI18N
        searchButton.setBorder(null);
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });
        getContentPane().add(searchButton);
        searchButton.setBounds(470, 40, 50, 50);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/staticImg/refreshIcon.png"))); // NOI18N
        refreshButton.setBorder(null);
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        getContentPane().add(refreshButton);
        refreshButton.setBounds(530, 40, 50, 50);

        deleteFriend.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        deleteFriend.setForeground(new java.awt.Color(255, 255, 255));
        deleteFriend.setText("Delete");
        deleteFriend.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        deleteFriend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteFriendMouseClicked(evt);
            }
        });
        getContentPane().add(deleteFriend);
        deleteFriend.setBounds(690, 400, 110, 30);

        deleteButton.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete");
        deleteButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(660, 590, 140, 60);

        usersRadioButton.setFont(new java.awt.Font("Univers LT 45 Light", 1, 12)); // NOI18N
        usersRadioButton.setText("users");
        getContentPane().add(usersRadioButton);
        usersRadioButton.setBounds(50, 110, 62, 23);

        groupRadioButton.setFont(new java.awt.Font("Univers LT 45 Light", 1, 12)); // NOI18N
        groupRadioButton.setText("groups");
        getContentPane().add(groupRadioButton);
        groupRadioButton.setBounds(140, 110, 70, 23);

        gameRadioButton.setFont(new java.awt.Font("Univers LT 45 Light", 1, 12)); // NOI18N
        gameRadioButton.setText("games");
        getContentPane().add(gameRadioButton);
        gameRadioButton.setBounds(240, 110, 69, 23);

        jLabel1.setFont(new java.awt.Font("Univers LT 45 Light", 0, 24)); // NOI18N
        jLabel1.setText("About Me:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(50, 150, 160, 30);

        createGroupButton.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        createGroupButton.setForeground(new java.awt.Color(255, 255, 255));
        createGroupButton.setText("Create Group");
        createGroupButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        createGroupButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createGroupButtonMouseClicked(evt);
            }
        });
        getContentPane().add(createGroupButton);
        createGroupButton.setBounds(660, 490, 140, 60);

        backgroundImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/staticImg/profile.jpeg"))); // NOI18N
        backgroundImg.setPreferredSize(new java.awt.Dimension(920, 750));
        getContentPane().add(backgroundImg);
        backgroundImg.setBounds(-5, -4, 920, 750);
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        if (editing.equals(false)){
          this.descriptionTextField.setEditable(true);
          this.editButton.setText("Save changes");
          editing = true;
        } else {
          if (this.descriptionTextField.getText().length() > 100){
              JOptionPane.showMessageDialog(null, "Please limit your description to under 400 characters!", "Uh-oh!", JOptionPane.INFORMATION_MESSAGE);
            } else {
              String updateStr = "update Account a set a.description = '" + this.descriptionTextField.getText() + 
                      "' where a.username = '" + MainForm.userName.toString() + "'";
              try {
                  System.out.println(updateStr);
                  stmt.executeUpdate(updateStr);
              } catch (SQLException ex) {
                  Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
              }
              System.out.println("Successfully stored the description");
           }
          this.descriptionTextField.setEditable(false);
          this.editButton.setText("Edit");
          editing = false;
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(null, "Log out?", "Leaving?", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION){
        new MainForm().setVisible(true);
        MainForm.userName="";
        this.setVisible(false);
        this.dispose(); 
        }
    }//GEN-LAST:event_logoutButtonMouseClicked

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        // TODO add your handling code here:
        Boolean users = usersRadioButton.isSelected();
        Boolean groups = groupRadioButton.isSelected();
        Boolean games = gameRadioButton.isSelected();
        String textField = searchField.getText();
         
        if (! ( users || groups || games )){
            JOptionPane.showMessageDialog(null, "Please select a search criteria! Note: leaving search field blank will return all results!", "Nothing is selected!", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
               
        if (users){
          new UserLibraryForm(textField).setVisible(true);      
        }
             
        if (groups){
            System.out.println("opening groups library");
            new GroupLibraryForm(textField).setVisible(true);
        }
        
        if (games){
            System.out.println("games group library");
            new GameLibraryForm(textField).setVisible(true);
        }                     
       
    }//GEN-LAST:event_searchButtonMouseClicked

    private void friendListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_friendListMouseClicked

    private void gameListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameListMouseClicked
        try {
            // TODO add your handling code here:
            String selectedGame = gameList.getSelectedValue();
            if (selectedGame == null){
                return;
            }
            String queryStr = "Select * from Game where gName='" + selectedGame + "'";
            rs = stmt.executeQuery(queryStr);
            rs.next();
            new GameInfoForm(rs.getString("gName"), rs.getString("gDescription"), rs.getInt("creatorID"), rs.getInt("currentPrice")).setVisible(true);
            System.out.println("Showing game info of " + rs.getString("gName"));
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_gameListMouseClicked

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_refreshButtonMouseClicked

    private void deleteFriendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteFriendMouseClicked
        // TODO add your handling code here:
        String deleteStr;
        String selected = friendList.getSelectedValue();
        try{
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure?", "Deleting selected friend:", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION){
                String selectStr = "select * from Account A where A.userName = '" + selected + "'";
                rs = stmt.executeQuery(selectStr);
                rs.next();
                int Uid  = rs.getInt("userID");
                int currID = MainForm.userID;
                deleteStr = "delete from FriendsWith where userID1 = "+Uid+" and UserID2 = "+currID;                              
                stmt.executeUpdate(deleteStr);
                deleteStr = "delete from FriendsWith where userID1 = "+currID+" and UserID2 = "+Uid;                              
                stmt.executeUpdate(deleteStr);
                refresh();
            }              
        } catch (SQLException ex) {
            Logger.getLogger(GameInfoForm.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
    }//GEN-LAST:event_deleteFriendMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        // TODO add your handling code here:
            
        String selected;
        try{
            // AT the game tab
            if (Tabs.getSelectedIndex()==0){
                int reply = JOptionPane.showConfirmDialog(null, "Are you sure?", "Deleting selected game:", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION){
                selected = gameList.getSelectedValue();
                String selectStr = "select * from Game G where G.gName = '" + selected + "'";
                rs = stmt.executeQuery(selectStr);
                rs.next();
                int gameID  = rs.getInt("gameID");
                String deleteStr = "delete from OwnsGame where gameID = "+ gameID +" and ownerID = "+ MainForm.userID+"";                              
                stmt.executeUpdate(deleteStr);
                refresh();
                }
            } 
            
            if (Tabs.getSelectedIndex()==1){
                int reply = JOptionPane.showConfirmDialog(null, "Are you sure?", "Deleting selected group:", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION){                
                selected = groupList.getSelectedValue();
                String selectedStr = "select * from FriendGroup where groupName= '" + selected + "'";
                rs = stmt.executeQuery(selectedStr);
                rs.next();
                int groupID = rs.getInt("gID");
                if (MainForm.userID==(rs.getInt("creatorUserID"))){
                    String deleteStr = "delete from FriendGroup where groupName= '" + selected + "' and creatorUserID= " + MainForm.userID;
                    stmt.executeUpdate(deleteStr);
                    refresh();
                } else {
                    String deleteStr = "delete from WithinGroup where withinGroupID=" + groupID + "  and memberUserID= " + MainForm.userID;
                    stmt.executeUpdate(deleteStr);
                    refresh();
                }
                }
            }
            
            if (Tabs.getSelectedIndex()==2){
                int reply = JOptionPane.showConfirmDialog(null, "Are you sure?", "Deleting selected review:", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION){                
                selected = reviewList.getSelectedValue();
                String selectStr = "select reviewID from Review R, Game G where R.gameReviewedID = G.gameID and G.gName = '" + selected + "'";
                rs = stmt.executeQuery(selectStr);
                rs.next();
                int reviewID  = rs.getInt("reviewID");
                String deleteStr = "delete from Review where reviewID = "+ reviewID +" and reviewerID = " + MainForm.userID;  
                System.out.println("Deleted Review");
                stmt.executeUpdate(deleteStr);
                refresh();
                }
            }
        
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void groupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupListMouseClicked
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            String selectedGroup = groupList.getSelectedValue();
            String queryStr = "Select * from FriendGroup F where F.groupName='" + selectedGroup + "'";
            rs = stmt.executeQuery(queryStr);
            rs.next();
            new GroupInfoForm(rs.getString("groupName"), rs.getString("groupDesc"), rs.getInt("creatorUserID"), rs.getString("dateCreated")).setVisible(true);
            System.out.println("Showing group info of " + rs.getString("groupName"));
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_groupListMouseClicked

    private void createGroupButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createGroupButtonMouseClicked
        // TODO add your handling code here:
        new CreateGroupForm().setVisible(true);
    }//GEN-LAST:event_createGroupButtonMouseClicked

    private void reviewListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reviewListMouseClicked
        try {
            // TODO add your handling code here:
            String selectedReview = reviewList.getSelectedValue();
            String query = "select G.gameID from Game G, Review R where R.reviewerID="+ MainForm.userID + " and G.gameID = R.gameReviewedID and G.gName='" + selectedReview + "'";
            System.out.println(query);
            rs = stmt.executeQuery(query);
            rs.next();
            int gameID = rs.getInt("gameID");
            new SearchReviewForm(MainForm.userID, gameID).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_reviewListMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Friends;
    private javax.swing.JLabel ProfileName;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JLabel backgroundImg;
    private javax.swing.JButton createGroupButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteFriend;
    private javax.swing.JTextArea descriptionTextField;
    public static javax.swing.JButton editButton;
    private javax.swing.JList<String> friendList;
    private javax.swing.JList<String> gameList;
    private javax.swing.JRadioButton gameRadioButton;
    private javax.swing.JScrollPane gamesTab;
    private javax.swing.JList<String> groupList;
    private javax.swing.JRadioButton groupRadioButton;
    private javax.swing.JScrollPane groupsTab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JList<String> reviewList;
    private javax.swing.JScrollPane reviewsTab;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JRadioButton usersRadioButton;
    // End of variables declaration//GEN-END:variables

    private void showProfileInfo() {
        try {
            this.setResizable(false); 
            this.ProfileName.setText(MainForm.userName);
            queryString = "select a.description from Account a where a.username = '" +
                    MainForm.userName.toString() + "'";
            rs = stmt.executeQuery(queryString);
            rs.next();
            this.descriptionTextField.setText(rs.getString("description"));
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showFriendList() {
        try {
            String queryString = "Select DISTINCT A.userName from Account A, FriendsWith F where F.userID1=" + MainForm.userID +
                    " and F.userID2=A.userID";
            rs = stmt.executeQuery(queryString);
            DefaultListModel friendListModel = new DefaultListModel();
            while(rs.next()){
                friendListModel.addElement(rs.getString("userName"));
            }
            friendList.setModel(friendListModel);
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showGameList() {
        
         try {
            String queryStr = "Select DISTINCT G.gName from OwnsGame O, Game G where G.gameID = O.gameID and O.ownerID=" + MainForm.userID;
            rs = stmt.executeQuery(queryStr);
            DefaultListModel gameListModel = new DefaultListModel();
            while (rs.next()){
                gameListModel.addElement(rs.getString("gName"));
            }
            gameList.setModel(gameListModel);
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showGroupList() {
        try {
            String queryStrGroup = "Select DISTINCT G.groupName from FriendGroup G , WithinGroup W where G.gID = W.withinGroupID and W.memberUserID=" + MainForm.userID;
            rs = stmt.executeQuery(queryStrGroup);
            DefaultListModel groupListModel = new DefaultListModel();
            while (rs.next()){
                groupListModel.addElement(rs.getString("groupName"));
            }
            groupList.setModel(groupListModel);
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showReviewList() {
        try {
            String queryStr = "select G.gName, G.gameID from Review R, Game G where R.reviewerID="+ MainForm.userID 
                                    + " and R.gameReviewedID = G.gameID group by gName";
            System.out.println(queryStr);
            rs = stmt.executeQuery(queryStr);
            DefaultListModel reviewListModel = new DefaultListModel();
            while (rs.next()){
                reviewListModel.addElement(rs.getString("gName"));
            }
            reviewList.setModel(reviewListModel);
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refresh() {
        this.setVisible(false);
        new ProfileForm().setVisible(true);
    }
    
}
