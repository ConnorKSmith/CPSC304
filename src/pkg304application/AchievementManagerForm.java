/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg304application;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import pkg304application.database.DatabaseConnection;

/**
 *
 * @author toldham
 */
public class AchievementManagerForm extends javax.swing.JFrame {

    
    ResultSet rs;
    Statement stmt;
    String gName;
    int loggedInUser;
    
    /**
     * Creates new form AchievementManagerForm
     */
    public AchievementManagerForm() {
        initComponents();
    }
    
    
    public AchievementManagerForm(int userID) {
        try {
            DatabaseConnection dbc = new DatabaseConnection();
            dbc.init();
            initComponents();
            stmt = dbc.getMyConnection().createStatement();
            disableAchievementViewer();
            loadGamesList(userID);
            loggedInUser = userID;
            
            //showAchievement(aID, gameID);
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        } catch (SQLException ex) {
            Logger.getLogger(GameInfoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadGamesList(int userID){
         try {
            String query = "select gName from OwnsGame O, Game G where O.ownerID="+ userID +" and O.gameID = G.gameID"; 
            rs = stmt.executeQuery(query);
            DefaultListModel gameListModel = new DefaultListModel();
            while(rs.next()){
                gameListModel.addElement(rs.getString("gName"));
            }
            GameList.setModel(gameListModel);
        } catch (SQLException ex) {
            Logger.getLogger(GameInfoForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void enableAchievementViewer(){
        AchievementTabbedPanel.setEnabled(true);
        AddAchievementList.setEnabled(true);
        UpdateAchievementList.setEnabled(true);
        AddButton.setEnabled(true);
    }
    private void disableAchievementViewer(){
        AchievementTabbedPanel.setEnabled(false);
        AddAchievementList.setEnabled(false);
        UpdateAchievementList.setEnabled(false);
        AddButton.setEnabled(false);        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        AchievementTabbedPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        AddAchievementList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        UpdateAchievementList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        AddAchievementSelectGamePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GameList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Achievement Manager");

        AddAchievementList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddAchievementListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(AddAchievementList);

        jLabel3.setText("Select an Achievement to Add. If you have already added all achievements, none will be displayed");

        jLabel5.setText("Achievements will be added with zero progress");

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(AddButton))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        AchievementTabbedPanel.addTab("Add a New Achievement", jPanel1);

        jScrollPane3.setViewportView(UpdateAchievementList);

        jLabel4.setText("Select an Achievement to Update. If you have no achievements, none will be displayed");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        AchievementTabbedPanel.addTab("Update Achievement Progress", jPanel2);

        AddAchievementSelectGamePanel.setBorder(new javax.swing.border.SoftBevelBorder(0));

        jLabel2.setText("Select a Game that you Own");

        GameList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        GameList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GameListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(GameList);

        javax.swing.GroupLayout AddAchievementSelectGamePanelLayout = new javax.swing.GroupLayout(AddAchievementSelectGamePanel);
        AddAchievementSelectGamePanel.setLayout(AddAchievementSelectGamePanelLayout);
        AddAchievementSelectGamePanelLayout.setHorizontalGroup(
            AddAchievementSelectGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddAchievementSelectGamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddAchievementSelectGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        AddAchievementSelectGamePanelLayout.setVerticalGroup(
            AddAchievementSelectGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddAchievementSelectGamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AchievementTabbedPanel)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(AddAchievementSelectGamePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddAchievementSelectGamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AchievementTabbedPanel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GameListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GameListMouseClicked
        try {
            if (evt.getClickCount() == 1){
                // Load the correct Achievements for the game that the user can update
                String queryStr = "Select aName from Achievement A, HasWorkTowards H, InAchievement I, Game G where gName='" + GameList.getSelectedValue() + "' ";
                queryStr += "and G.gameID = I.gameID and I.aID = A.aID ";
                queryStr += "and H.aID = A.aID and H.playerID = " + loggedInUser;
                rs = stmt.executeQuery(queryStr);
                DefaultListModel updateAchievementListModel = new DefaultListModel();
                while(rs.next()){
                    updateAchievementListModel.addElement(rs.getString("aName"));
                }
                UpdateAchievementList.setModel(updateAchievementListModel);
                // TODO: Addable achievements
                // Load achievements that can be added for the game
                String queryStr2 = "Select aName from Achievement A, InAchievement I, Game G where G.gameID = I.gameID and I.aID = A.aID and G.gName='" + GameList.getSelectedValue() + "' and aName not in (";
                queryStr2 += queryStr;
                queryStr2 += ")";
                rs = stmt.executeQuery(queryStr2);
                DefaultListModel addAchievementListModel = new DefaultListModel();
                while (rs.next()){
                    addAchievementListModel.addElement(rs.getString("aName"));
                }
                AddAchievementList.setModel(addAchievementListModel);
                enableAchievementViewer();
                // Selections will be removed so disable final operation buttons
                AddButton.setEnabled(false); 
            }
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GameListMouseClicked

    private void AddAchievementListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddAchievementListMouseClicked
        
        if (evt.getClickCount() == 1){
            AddButton.setEnabled(true); 
        }

    }//GEN-LAST:event_AddAchievementListMouseClicked

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // Add the selected achievement to the selected game with no progress
        try {
            // first find the achievementID of the selected achievement
            String queryStr = "Select aID from Achievement A where A.aName = '" + AddAchievementList.getSelectedValue() + "' ";
            rs = stmt.executeQuery(queryStr);
            rs.next();
            int aID = Integer.parseInt(rs.getString("aID"));
            
            // Insert into DB
            String insertStr = "Insert into HasWorkTowards(playerID, aID, progress, isComplete) values('" + loggedInUser + "' , '"
                    + aID + "' , 0, false)";
            stmt.executeUpdate(insertStr);
            this.setVisible(false);
            this.dispose();
            
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_AddButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AchievementManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AchievementManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AchievementManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AchievementManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AchievementManagerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane AchievementTabbedPanel;
    private javax.swing.JList<String> AddAchievementList;
    private javax.swing.JPanel AddAchievementSelectGamePanel;
    private javax.swing.JButton AddButton;
    private javax.swing.JList<String> GameList;
    private javax.swing.JList<String> UpdateAchievementList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
