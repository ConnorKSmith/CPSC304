/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg304application;
import pkg304application.database.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;

/**
 *
 * @author jko
 */
public class SearchUserForm extends javax.swing.JFrame {
    
    Statement stmt = null;
    ResultSet rs = null;
    static int thisUserID;
    Boolean isDev;
    /**
     * Creates new form ProfileForm
     */
    public SearchUserForm(int searchUserID, boolean dev) {
            initComponents();
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            if (searchUserID == 0){
                searchUserID = DeveloperForm.searchUserID;
            }
            thisUserID = searchUserID;
            isDev= dev;
            showProfileInfo();
            showFriendList();
            showGameList();
            showGroupList();
            showReviewList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextField = new javax.swing.JTextArea();
        ProfileName = new javax.swing.JLabel();
        Friends = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        friendList = new javax.swing.JList<>();
        addFriend = new javax.swing.JButton();
        Tabs = new javax.swing.JTabbedPane();
        gamesTab = new javax.swing.JScrollPane();
        gameList = new javax.swing.JList<>();
        groupsTab = new javax.swing.JScrollPane();
        groupList = new javax.swing.JList<>();
        reviewsTab = new javax.swing.JScrollPane();
        reviewList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        descriptionTextField.setColumns(20);
        descriptionTextField.setRows(5);
        jScrollPane1.setViewportView(descriptionTextField);
        descriptionTextField.setEditable(false);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 550, 200));

        ProfileName.setFont(new java.awt.Font("PT Serif Caption", 1, 24)); // NOI18N
        ProfileName.setText("Profile Name:");
        getContentPane().add(ProfileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));

        Friends.setFont(new java.awt.Font("PT Serif Caption", 1, 24)); // NOI18N
        Friends.setText("Friends:");
        getContentPane().add(Friends, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 120, -1, -1));

        friendList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        friendList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(friendList);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 160, 120, 200));

        addFriend.setText("Add Friend");
        addFriend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addFriendMouseClicked(evt);
            }
        });
        getContentPane().add(addFriend, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, -1, -1));

        Tabs.setFont(new java.awt.Font("Univers LT 45 Light", 1, 12)); // NOI18N

        gameList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gameList.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        gameList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        gameList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gameListMouseClicked(evt);
            }
        });
        gamesTab.setViewportView(gameList);

        Tabs.addTab("Games", gamesTab);

        groupList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        groupList.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        groupList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        groupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupListMouseClicked(evt);
            }
        });
        groupsTab.setViewportView(groupList);

        Tabs.addTab("Groups", groupsTab);

        reviewList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        reviewList.setFont(new java.awt.Font("Univers LT 45 Light", 1, 14)); // NOI18N
        reviewList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        reviewList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reviewListMouseClicked(evt);
            }
        });
        reviewsTab.setViewportView(reviewList);

        Tabs.addTab("Reviews", reviewsTab);

        getContentPane().add(Tabs, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 740, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void friendListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_friendListMouseClicked

    private void addFriendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addFriendMouseClicked
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            if (!addFriend.isEnabled()){
                System.out.println("button is not enabled");
                return;
            }
            String insertStr = "Insert into FriendsWith(userID1, userID2) values(" + MainForm.userID + "," + thisUserID + ")";
            stmt.executeUpdate(insertStr);
            insertStr = "Insert into FriendsWith(userID1, userID2) values(" + thisUserID + "," + MainForm.userID + ")";
            stmt.executeUpdate(insertStr);
            System.out.println("added to friendlist");
            addFriend.setText("Friends");
            addFriend.setEnabled(false);
        } catch (SQLException ex) {
            Logger.getLogger(UserResultForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addFriendMouseClicked

    private void gameListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameListMouseClicked
        try {
            // TODO add your handling code here:
            String selectedGame = gameList.getSelectedValue();
            if (selectedGame == null){
                return;
            }
            String queryStr = "Select * from Game where gName='" + selectedGame + "'";
            rs = stmt.executeQuery(queryStr);
            rs.next();
            new GameInfoForm(rs.getString("gName"), rs.getString("gDescription"), rs.getInt("creatorID"), rs.getInt("currentPrice")).setVisible(true);
            System.out.println("Showing game info of " + rs.getString("gName"));
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_gameListMouseClicked

    private void groupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupListMouseClicked
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            String selectedGroup = groupList.getSelectedValue();
            String queryStr = "Select * from FriendGroup F where F.groupName='" + selectedGroup + "'";
            rs = stmt.executeQuery(queryStr);
            rs.next();
            new GroupInfoForm(rs.getString("groupName"), rs.getString("groupDesc"), rs.getInt("creatorUserID"), rs.getString("dateCreated")).setVisible(true);
            System.out.println("Showing group info of " + rs.getString("groupName"));
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_groupListMouseClicked

    private void reviewListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reviewListMouseClicked
        try {
            // TODO add your handling code here:
            String selectedReview = reviewList.getSelectedValue();
            String query = "select G.gameID from Game G, Review R where R.reviewerID="+ thisUserID + " and G.gameID = R.gameReviewedID and G.gName='" + selectedReview + "'";
            System.out.println(query);
            rs = stmt.executeQuery(query);
            rs.next();
            int gameID = rs.getInt("gameID");
            new SearchReviewForm(MainForm.userID, gameID).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_reviewListMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Friends;
    private javax.swing.JLabel ProfileName;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JButton addFriend;
    private javax.swing.JTextArea descriptionTextField;
    private javax.swing.JList<String> friendList;
    private javax.swing.JList<String> gameList;
    private javax.swing.JScrollPane gamesTab;
    private javax.swing.JList<String> groupList;
    private javax.swing.JScrollPane groupsTab;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> reviewList;
    private javax.swing.JScrollPane reviewsTab;
    // End of variables declaration//GEN-END:variables

    private void showProfileInfo() {
        try {
            DatabaseConnection dbc = new DatabaseConnection();
            dbc.init();
            this.setResizable(false); 
            stmt= dbc.getMyConnection().createStatement(); 
            String queryString = "select * from Account a where a.userID=" + thisUserID;
            rs = stmt.executeQuery(queryString);
            System.out.println(queryString);
            rs.next();
            ProfileName.setText(rs.getString("userName"));        
            descriptionTextField.setText(rs.getString("description"));
            queryString = "Select * from FriendsWith where userID1=" + MainForm.userID + " and userID2=" + thisUserID;
            rs = stmt.executeQuery(queryString);
            if (rs.next()){
                System.out.println("Already friends");
                addFriend.setText("Friends");
                addFriend.setEnabled(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(SearchUserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showFriendList() {
        try {
            String queryString = "Select DISTINCT A.userName from Account A, FriendsWith F where F.userID1=" + thisUserID +
                    " and F.userID2=A.userID";
            rs = stmt.executeQuery(queryString);
            DefaultListModel friendListModel = new DefaultListModel();
            while(rs.next()){
                friendListModel.addElement(rs.getString("userName"));
            }
            friendList.setModel(friendListModel);
        } catch (SQLException ex) {
            Logger.getLogger(SearchUserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    private void showGameList() {
        
         try {
            if (isDev){
                 String queryStr = "Select * from Game G, Developer D where G.creatorID = D.developerID and D.developerID = " + thisUserID;
                rs = stmt.executeQuery(queryStr);
                DefaultListModel gameListModel = new DefaultListModel();
                 while (rs.next()){
                gameListModel.addElement(rs.getString("gName"));
                 }
                gameList.setModel(gameListModel);
            } else {
            String queryStr = "Select DISTINCT G.gName from OwnsGame O, Game G where G.gameID = O.gameID and O.ownerID=" + thisUserID;
            rs = stmt.executeQuery(queryStr);
            DefaultListModel gameListModel = new DefaultListModel();
            while (rs.next()){
                gameListModel.addElement(rs.getString("gName"));
            }
            gameList.setModel(gameListModel);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showGroupList() {
        try {
            String queryStrGroup = "Select DISTINCT G.groupName from FriendGroup G , WithinGroup W where G.gID = W.withinGroupID and W.memberUserID=" + thisUserID;
            rs = stmt.executeQuery(queryStrGroup);
            DefaultListModel groupListModel = new DefaultListModel();
            while (rs.next()){
                groupListModel.addElement(rs.getString("groupName"));
            }
            groupList.setModel(groupListModel);
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showReviewList() {
        try {
            String queryStr = "select G.gName, G.gameID from Review R, Game G where R.reviewerID="+ thisUserID 
                                    + " and R.gameReviewedID = G.gameID group by gName";
            rs = stmt.executeQuery(queryStr);
            DefaultListModel reviewListModel = new DefaultListModel();
            while (rs.next()){
                reviewListModel.addElement(rs.getString("gName"));
            }
            reviewList.setModel(reviewListModel);
        } catch (SQLException ex) {
            Logger.getLogger(ProfileForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
}
