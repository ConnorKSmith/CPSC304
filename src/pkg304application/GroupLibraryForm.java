/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg304application;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import pkg304application.database.DatabaseConnection;

/**
 *
 * @author jko
 */
public class GroupLibraryForm extends javax.swing.JFrame {

    /**
     * Creates new form GroupLibraryForm1
     */
    ResultSet rs;
    ResultSet rs2;
    Statement stmt;
    Statement stmt2; 
    String textField;   
    String thisFilterQuery;
    
    public GroupLibraryForm(String searchField) {
      try {
            initComponents();
            DatabaseConnection dbc = new DatabaseConnection();
            dbc.init();
            if (!searchField.equals("")){
            textField = "%" + searchField + "%";
            } else {
                textField = "%";
            }
            showFilter();    
            stmt = dbc.getMyConnection().createStatement();
            stmt2 = dbc.getMyConnection().createStatement();            
            showGroupList(searchField);
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        } catch (SQLException ex) {
            Logger.getLogger(GameInfoForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        filterBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        groupList = new javax.swing.JList<>();
        joinButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        popChoice = new java.awt.Choice();
        popField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(217, 325));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Univers LT 45 Light", 0, 14)); // NOI18N
        jLabel1.setText("Search result for groups:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 110, 180, 18);

        jLabel2.setFont(new java.awt.Font("Univers LT 45 Light", 0, 12)); // NOI18N
        jLabel2.setText("Narrow by:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 20, 59, 16);

        filterBtn.setFont(new java.awt.Font("Univers LT 45 Light", 0, 12)); // NOI18N
        filterBtn.setText("Filter");
        filterBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterBtnMouseClicked(evt);
            }
        });
        getContentPane().add(filterBtn);
        filterBtn.setBounds(10, 70, 75, 29);

        groupList.setFont(new java.awt.Font("Univers LT 45 Light", 0, 12)); // NOI18N
        groupList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        groupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(groupList);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 130, 210, 120);

        joinButton.setFont(new java.awt.Font("Univers LT 45 Light", 0, 12)); // NOI18N
        joinButton.setText("Join");
        joinButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                joinButtonMouseClicked(evt);
            }
        });
        getContentPane().add(joinButton);
        joinButton.setBounds(20, 270, 75, 29);

        jLabel3.setFont(new java.awt.Font("Univers LT 45 Light", 0, 12)); // NOI18N
        jLabel3.setText("population:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 50, 61, 16);

        popChoice.setFont(new java.awt.Font("Univers LT 45 Light", 0, 12)); // NOI18N
        getContentPane().add(popChoice);
        popChoice.setBounds(100, 50, 70, 20);

        popField.setFont(new java.awt.Font("Univers LT 45 Light", 0, 12)); // NOI18N
        getContentPane().add(popField);
        popField.setBounds(190, 50, 40, 26);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void joinButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_joinButtonMouseClicked
        // TODO add your handling code here:       
        try{
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure?", "Join group?", JOptionPane.YES_NO_OPTION);
            if (reply==JOptionPane.YES_OPTION){
            String selectStr = "select * from FriendGroup G where G.groupName = '" + groupList.getSelectedValue() + "'";
            rs = stmt.executeQuery(selectStr);
            rs.next();
            String insertStr = "insert into WithinGroup(memberUserID, withinGroupID) " 
                    + "values(" + MainForm.userID + " , " + rs.getInt("gID") + ")";                        
            stmt.executeUpdate(insertStr); 
            this.setVisible(false);
            this.dispose();
            }            
        } catch (SQLException ex) {
            Logger.getLogger(GameInfoForm.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }        
    }//GEN-LAST:event_joinButtonMouseClicked

    private void groupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupListMouseClicked
        // TODO add your handling code here:
        try {
            if (evt.getClickCount() == 2){
                // TODO add your handling code here:
                String selectedGroup = groupList.getSelectedValue();
                String queryStr = "Select * from FriendGroup where groupName='" + selectedGroup + "'";
                rs = stmt.executeQuery(queryStr);
                rs.next();
                new GroupInfoForm(rs.getString("groupName"), rs.getString("groupDesc"), rs.getInt("creatorUserID"), rs.getString("dateCreated")).setVisible(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_groupListMouseClicked

    private void filterBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterBtnMouseClicked
        try {
            // TODO add your handling code here:
            groupLibraryQueryBuilder();
            rs = stmt.executeQuery(thisFilterQuery);
            DefaultListModel groupListModel = new DefaultListModel();
            while (rs.next()){
                groupListModel.addElement(rs.getString("groupName"));
            }
            groupList.setModel(groupListModel);
        } catch (SQLException ex) {
            Logger.getLogger(GroupLibraryForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_filterBtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filterBtn;
    private javax.swing.JList<String> groupList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton joinButton;
    private java.awt.Choice popChoice;
    private javax.swing.JTextField popField;
    // End of variables declaration//GEN-END:variables

    private void showGroupList(String textField) {
        try {
            DefaultListModel groupListModel = new DefaultListModel();
            if (textField.equals("")){
                String queryStr = "Select DISTINCT G.groupName from FriendGroup G";
                rs = stmt.executeQuery(queryStr);
                while (rs.next()){
                    groupListModel.addElement(rs.getString("groupName"));
                }
                groupList.setModel(groupListModel);
            } else {
                String queryStr = "Select DISTINCT G.groupName from FriendGroup G where G.groupName LIKE '%" + textField + "%'";               
                rs = stmt.executeQuery(queryStr);
                while (rs.next()){
                    groupListModel.addElement(rs.getString("groupName"));
                }
                groupList.setModel(groupListModel);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DeveloperForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    

    private void showFilter() {
            popChoice.add(">");
            popChoice.add(">=");
            popChoice.add("=");
            popChoice.add("<=");
            popChoice.add("<");
            popChoice.add("!=");
            popChoice.add(" ");
    }

    private void groupLibraryQueryBuilder() {
        thisFilterQuery = "select distinct G.groupName from FriendGroup G, WithinGroup W where G.gID = W.withinGroupID"
                + " and G.groupName LIKE '" + textField + "'";
        if (checkFilterFields()){
            if (popChoice.getSelectedItem().equals(" ") || popField.getText().equals("")){
                return;
            }          
            thisFilterQuery = thisFilterQuery.concat(" group by groupName having count(memberUserID) " 
                    + popChoice.getSelectedItem() + popField.getText());    
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a positive number!", "Invalid filter!", JOptionPane.INFORMATION_MESSAGE);      
        }
    }
    
    private boolean checkFilterFields() {
        try{
        int pop = -1;
        if (!popField.getText().equals("")){
            pop = Integer.parseInt(popField.getText());
            if (pop < 0){
                return false;
            }
        }
        return true;
        } catch (NumberFormatException nfe){
            return false;
        }
        
    }    
}
